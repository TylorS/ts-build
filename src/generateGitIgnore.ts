import { existsSync, readFileSync } from 'fs'
import { EOL } from 'os'
import { join } from 'path'

import { OutputModule } from './types'

export const GENERATED_START = `### Start: Generated by @typed/ts-build ###`
export const GENERATED_END = `### End: Generated by @typed/ts-build ###`

export function generateGitIgnore(directory: string, filePath: string, outputModules: ReadonlyArray<OutputModule>) {
  const gitignore = join(directory, filePath)

  if (!existsSync(gitignore)) {
    return [GENERATED_START, '.tsbuild', ...outputModules.map((x) => `/${x.name}/`), GENERATED_END, EOL].join('\n')
  }

  const currentContent = readFileSync(gitignore).toString()
  const startIndex = currentContent.indexOf(GENERATED_START)
  const endIndex = currentContent.indexOf(GENERATED_END)

  if (startIndex !== -1 && endIndex !== -1) {
    const before = currentContent.slice(0, startIndex)
    const after = currentContent.slice(endIndex + GENERATED_END.length)

    return [
      before.trimEnd(),
      EOL,
      GENERATED_START,
      '.tsbuild',
      ...outputModules.map((x) => `/${x.name}/`),
      GENERATED_END,
      after.trimEnd(),
    ].join('\n')
  }

  return [
    currentContent.trimEnd(),
    EOL,
    GENERATED_START,
    '.tsbuild',
    ...outputModules.map((x) => `/${x.name}/`),
    GENERATED_END,
    EOL,
  ].join('\n')
}
